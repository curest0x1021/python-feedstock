From 09eb0bb161d56ef1411f5d7dc78b85859f771542 Mon Sep 17 00:00:00 2001
From: Jonathan Helmus <jjhelmus@gmail.com>
Date: Tue, 22 Oct 2019 16:32:12 -0500
Subject: [PATCH 19/20] add conda paths to DLL search path on windows

bpo-36085 restricts the library search paths on Windows.  Conda uses a
pre-defined set of paths relative to the environment root to store
libraries. Add these paths to the search path using AddDllDirectory.
---
 Python/dynload_win.c | 41 +++++++++++++++++++++++++++++++++++++++++
 1 file changed, 41 insertions(+)

diff --git a/Python/dynload_win.c b/Python/dynload_win.c
index 6deba1134e..6b9cd6fd07 100644
--- a/Python/dynload_win.c
+++ b/Python/dynload_win.c
@@ -166,6 +166,22 @@ static char *GetPythonImport (HINSTANCE hModule)
     return NULL;
 }
 
+typedef void (WINAPI *ADD)(PCWSTR NewDirectory);
+typedef struct
+{
+    wchar_t *p_relative;
+    wchar_t *p_name;
+} CONDA_PATH;
+#define NUM_CONDA_PATHS 5
+static CONDA_PATH condaPaths[NUM_CONDA_PATHS] =
+{
+    {L"Library\\mingw-w64\\bin", NULL},
+    {L"Library\\usr\\bin", NULL},
+    {L"Library\\bin", NULL},
+    {L"Scripts", NULL},
+    {L"bin", NULL}
+};
+
 dl_funcptr _PyImport_FindSharedFuncptrWindows(const char *prefix,
                                               const char *shortname,
                                               PyObject *pathname, FILE *fp)
@@ -173,6 +189,9 @@ dl_funcptr _PyImport_FindSharedFuncptrWindows(const char *prefix,
     dl_funcptr p;
     char funcname[258], *import_python;
     const wchar_t *wpathname;
+    ADD pAddDllDirectory;
+    wchar_t sv_executable_dirname[1024];
+    CONDA_PATH *p_conda_path;
 
 #ifndef _DEBUG
     _Py_CheckPython3();
@@ -201,10 +220,32 @@ dl_funcptr _PyImport_FindSharedFuncptrWindows(const char *prefix,
            to avoid DLL preloading attacks and enable use of the
            AddDllDirectory function. We add SEARCH_DLL_LOAD_DIR to
            ensure DLLs adjacent to the PYD are preferred. */
+        pAddDllDirectory = (ADD)GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "AddDllDirectory");
+        if (pAddDllDirectory != NULL) {
+            /* Determine sv_executable_dirname */
+            GetModuleFileNameW(NULL, &sv_executable_dirname[0], sizeof(sv_executable_dirname)/sizeof(sv_executable_dirname[0])-1);
+            sv_executable_dirname[sizeof(sv_executable_dirname)/sizeof(sv_executable_dirname[0])-1] = L'\0';
+            if (wcsrchr(sv_executable_dirname, L'\\'))
+                *wcsrchr(sv_executable_dirname, L'\\') = L'\0';
+            /* add each conda path to the search path */
+            for (p_conda_path = &condaPaths[0]; p_conda_path < &condaPaths[NUM_CONDA_PATHS]; ++p_conda_path)
+            {
+                size_t n_chars_executable_dirname = wcslen(sv_executable_dirname);
+                size_t n_chars_p_relative = wcslen(p_conda_path->p_relative);
+                p_conda_path->p_name = malloc(sizeof(wchar_t) * (n_chars_executable_dirname + n_chars_p_relative + 2));
+                wcsncpy(p_conda_path->p_name, sv_executable_dirname, n_chars_executable_dirname+1);
+                wcsncat(p_conda_path->p_name, L"\\", 2);
+                wcsncat(p_conda_path->p_name, p_conda_path->p_relative, n_chars_p_relative+1);
+                pAddDllDirectory(p_conda_path->p_name);
+            }
+        }
         Py_BEGIN_ALLOW_THREADS
         hDLL = LoadLibraryExW(wpathname, NULL,
                               LOAD_LIBRARY_SEARCH_DEFAULT_DIRS |
                               LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR);
+        /* conda stores DLLs in a small number of directories which are added
+         * to the DLL search.
+         */
         Py_END_ALLOW_THREADS
 #if HAVE_SXS
         _Py_DeactivateActCtx(cookie);
-- 
2.23.0

